import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.filters import Command
import aioschedule as schedule
from datetime import datetime, timedelta

API_TOKEN = '8070156187:AAFqOPD5sM0PnKAQG3EnTOscV1h79sN0Rts'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–±—ã—Ç–∏–π (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î)
user_schedules = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π /add —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∏ /list —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫.")

# –ö–æ–º–∞–Ω–¥–∞ /add
@dp.message(Command("add"))
async def add_event(message: types.Message):
    try:
        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            raise ValueError

        time_str, event = parts[1], parts[2]
        event_time = datetime.strptime(time_str, "%H:%M")

        user_id = message.from_user.id
        now = datetime.now()
        event_datetime = now.replace(hour=event_time.hour, minute=event_time.minute, second=0, microsecond=0)
        if event_datetime < now:
            event_datetime += timedelta(days=1)

        if user_id not in user_schedules:
            user_schedules[user_id] = []

        user_schedules[user_id].append((event_datetime, event))
        await message.answer(f"–°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {event} –≤ {event_datetime.strftime('%H:%M')}")

    except ValueError:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /add HH:MM —Å–æ–±—ã—Ç–∏–µ")

# –ö–æ–º–∞–Ω–¥–∞ /schedule
@dp.message(Command("schedule"))
async def list_events(message: types.Message):
    user_id = message.from_user.id
    events = user_schedules.get(user_id, [])
    if not events:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π.")
    else:
        msg = "\n".join([f"{dt.strftime('%H:%M')} - {ev}" for dt, ev in sorted(events)])
        await message.answer("–¢–≤–æ–∏ —Å–æ–±—ã—Ç–∏—è:\n" + msg)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def notify_events():
    now = datetime.now()
    for user_id, events in list(user_schedules.items()):
        for event in events:
            dt, text = event
            if 0 <= (dt - now).total_seconds() <= 60:
                await bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text} –≤ {dt.strftime('%H:%M')}")
        # –û—á–∏—â–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ
        user_schedules[user_id] = [e for e in events if e[0] > now]

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞
async def scheduler():
    schedule.every(1).minutes.do(notify_events)
    while True:
        await schedule.run_pending()
        await asyncio.sleep(1)

# –ó–∞–ø—É—Å–∫
async def main():
    asyncio.create_task(scheduler())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
